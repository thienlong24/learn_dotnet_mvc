@model MvcMovie.Models.MovieIndexViewModel

@{
    ViewData["Title"] = "Movie List";
    var successMessage = Context.Request.Query["successMessage"];
    var pageSizeOptions = new[] { 5, 10, 20, 50 };
}

<link rel="stylesheet" href="~/css/movies.css" />

<div class="container mt-4">
    <h1 class="text-center mb-4">Movie List</h1>
    <div class="mb-3 d-flex justify-content-between align-items-center">
        <a class="btn btn-primary" asp-controller="Movies" asp-action="Create">Create New Movie</a>
        <form method="get" asp-action="Index" class="d-inline-block">
            <label for="pageSize" class="me-2">Page size:</label>
            <select id="pageSize" name="pageSize" class="form-select d-inline-block w-auto" onchange="this.form.submit()">
                @foreach (var size in pageSizeOptions)
                {
                    @if (size == Model.PageSize)
                    {
                        <option value="@size" selected="selected">@size</option>
                    } else
                    {
                        <option value="@size">@size</option>
                    }                    
                }
            </select>
            <input type="hidden" name="page" value="1" />
        </form>
    </div>
    <table class="table table-hover">
        <thead style="background-color: #2c3e50; color: #ecf0f1;">
            <tr>
                <th>Title</th>
                <th>Release Date</th>
                <th>Genre</th>
                <th>Price</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody style="background-color: #34495e; color: #ecf0f1;">
            @foreach (var movie in Model.Movies)
            {
                <tr id="movie-row-@movie.Id">
                    <td>@movie.Title</td>
                    <td>@movie.ReleaseDate.ToShortDateString()</td>
                    <td>@movie.Genre</td>
                    <td>@movie.Price.ToString("C")</td>
                    <td>
                        <a class="btn btn-info btn-sm" asp-action="Details" asp-route-id="@movie.Id" style="background-color: #4ca1af; border-color: #4ca1af;">View</a>
                        <a class="btn btn-warning btn-sm" asp-action="Edit" asp-route-id="@movie.Id" style="background-color: #f39c12; border-color: #f39c12;">Edit</a>
                        <button class="btn btn-danger btn-sm" onclick="deleteMovie('@movie.Id', '@movie.Title')" style="background-color: #e74c3c; border-color: #e74c3c;">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <!-- Paging controls -->
    <nav aria-label="Page navigation">
        <ul class="pagination justify-content-center">
            <li class="page-item @(Model.PageNumber == 1 ? "disabled" : "")">
                <a class="page-link" asp-action="Index" asp-route-page="@(Model.PageNumber - 1)" asp-route-pageSize="@Model.PageSize">Previous</a>
            </li>
            @for (int i = 1; i <= Model.TotalPages; i++)
            {
                <li class="page-item @(i == Model.PageNumber ? "active" : "")">
                    <a class="page-link" asp-action="Index" asp-route-page="@i" asp-route-pageSize="@Model.PageSize">@i</a>
                </li>
            }
            <li class="page-item @(Model.PageNumber == Model.TotalPages ? "disabled" : "")">
                <a class="page-link" asp-action="Index" asp-route-page="@(Model.PageNumber + 1)" asp-route-pageSize="@Model.PageSize">Next</a>
            </li>
        </ul>
    </nav>
</div>

@if (!string.IsNullOrEmpty(successMessage))
{
    <div id="toast" class="toast success" style="display: block;">@successMessage</div>
}

@section Scripts {
    <script src="~/js/toast-util.js"></script>
    <script>
        async function deleteMovie(movieId, movieTitle) {
            if (confirm(`Are you sure you want to delete the movie "${movieTitle}"?`)) {
                try {
                    const response = await fetch(`/Movies/Delete/${movieId}`, {
                        method: "DELETE",
                        headers: {
                            "Content-Type": "application/json"
                        }
                    });

                    if (response.ok) {
                        // Remove the movie row from the table
                        document.getElementById(`movie-row-${movieId}`).remove();
                        showToast(`Movie "${movieTitle}" deleted successfully!`, "success");
                    } else {
                        const errorData = await response.json();
                        showToast(`Failed to delete movie: ${errorData.error || "Unknown error"}`, "error");
                    }
                } catch (error) {
                    showToast(`Error deleting movie: ${error.message}`, "error");
                }
            }
        }

        // Automatically hide the toast after 3 seconds (for successMessage on page load)
        const toast = document.getElementById("toast");
        if (toast) {
            setTimeout(() => {
                toast.style.display = "none";
            }, 3000);
        }
    </script>
} 
