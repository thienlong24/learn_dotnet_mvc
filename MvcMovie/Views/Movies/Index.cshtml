@model MvcMovie.Models.MovieIndexViewModel

@{
    ViewData["Title"] = "Movie List";
    var successMessage = Context.Request.Query["successMessage"];
}

<link rel="stylesheet" href="~/css/movies.css" />
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">

<div class="d-flex justify-content-between align-items-center mb-3">
    <h1>Movies</h1>
    <div class="btn-group">
        <a asp-action="Create" class="btn btn-primary">Create New</a>
        <a asp-action="Import" class="btn btn-success">Import</a>
    </div>
</div>

<div class="row mb-3">
    <div class="col-md-6">
        <form asp-action="Index" method="get" class="d-flex gap-2">
            <input type="text" name="SearchString" value="@ViewData["CurrentFilter"]" class="form-control" placeholder="Search by title..." />
            <button type="submit" class="btn btn-primary">Search</button>
        </form>
    </div>
    <div class="col-md-6">
        <div class="d-flex justify-content-end align-items-center gap-2">
            <label class="form-label mb-0">Items per page:</label>
            <div class="btn-group">
                @foreach (int size in ((int[])ViewData["AllowedPageSizes"]!)!)
                {
                    <a asp-action="Index"
                       asp-route-pageSize="@size"
                       asp-route-currentFilter="@ViewData["CurrentFilter"]"
                       asp-route-sortOrder="@ViewData["CurrentSort"]"
                       class="btn btn-outline-primary @(size == (int)ViewData["CurrentPageSize"]! ? "active" : "")">
                        @size
                    </a>
                }
            </div>
        </div>
    </div>
</div>

<table class="table table-striped table-hover">
    <thead>
        <tr>
            <th>
                <a asp-action="Index" 
                   asp-route-sortOrder="@ViewData["TitleSortParam"]" 
                   asp-route-currentFilter="@ViewData["CurrentFilter"]"
                   asp-route-pageSize="@ViewData["CurrentPageSize"]"
                   class="text-dark text-decoration-none d-inline-flex align-items-center gap-1">
                    Title
                    @if (string.IsNullOrEmpty((string)ViewData["CurrentSort"]!))
                    {
                        <i class="bi bi-sort-down"></i>
                    }
                    else if ((string)ViewData["CurrentSort"]! == "title_desc")
                    {
                        <i class="bi bi-sort-up"></i>
                    }
                    else
                    {
                        <i class="bi bi-arrows-collapse-vertical text-black-50"></i>
                    }
                </a>
            </th>
            <th>
                <a asp-action="Index" 
                   asp-route-sortOrder="@ViewData["DateSortParam"]" 
                   asp-route-currentFilter="@ViewData["CurrentFilter"]"
                   asp-route-pageSize="@ViewData["CurrentPageSize"]"
                   class="text-dark text-decoration-none d-inline-flex align-items-center gap-1">
                    Release Date
                    @if ((string)ViewData["CurrentSort"] == "date")
                    {
                        <i class="bi bi-sort-down"></i>
                    }
                    else if ((string)ViewData["CurrentSort"] == "date_desc")
                    {
                        <i class="bi bi-sort-up"></i>
                    }
                    else
                    {
                        <i class="bi bi-arrows-collapse-vertical text-black-50"></i>
                    }
                </a>
            </th>
            <th>
                <a asp-action="Index" 
                   asp-route-sortOrder="@ViewData["GenreSortParam"]" 
                   asp-route-currentFilter="@ViewData["CurrentFilter"]"
                   asp-route-pageSize="@ViewData["CurrentPageSize"]"
                   class="text-dark text-decoration-none d-inline-flex align-items-center gap-1">
                    Genre
                    @if ((string)ViewData["CurrentSort"] == "genre")
                    {
                        <i class="bi bi-sort-down"></i>
                    }
                    else if ((string)ViewData["CurrentSort"] == "genre_desc")
                    {
                        <i class="bi bi-sort-up"></i>
                    }
                    else
                    {
                        <i class="bi bi-arrows-collapse-vertical text-black-50"></i>
                    }
                </a>
            </th>
            <th>
                <a asp-action="Index" 
                   asp-route-sortOrder="@ViewData["PriceSortParam"]" 
                   asp-route-currentFilter="@ViewData["CurrentFilter"]"
                   asp-route-pageSize="@ViewData["CurrentPageSize"]"
                   class="text-dark text-decoration-none d-inline-flex align-items-center gap-1">
                    Price
                    @if ((string)ViewData["CurrentSort"] == "price")
                    {
                        <i class="bi bi-sort-down"></i>
                    }
                    else if ((string)ViewData["CurrentSort"] == "price_desc")
                    {
                        <i class="bi bi-sort-up"></i>
                    }
                    else
                    {
                        <i class="bi bi-arrows-collapse-vertical text-black-50"></i>
                    }
                </a>
            </th>
            <th>Actions</th>
        </tr>
    </thead>

    <tbody>
        @foreach (var movie in Model.Movies)
        {
            <tr id="movie-row-@movie.Id">
                <td>@Html.DisplayFor(modelItem => movie.Title)</td>
                <td>@Html.DisplayFor(modelItem => movie.ReleaseDate)</td>
                <td>@Html.DisplayFor(modelItem => movie.Genre)</td>
                <td>@Html.DisplayFor(modelItem => movie.Price)</td>
                <td>
                    <div class="btn-group">
                        <a asp-action="Edit" asp-route-id="@movie.Id" class="btn btn-sm btn-primary">Edit</a>
                        <a asp-action="Details" asp-route-id="@movie.Id" class="btn btn-sm btn-info">Details</a>
                        <button class="btn btn-danger btn-sm" onclick="deleteMovie('@movie.Id', '@movie.Title')" style="background-color: #e74c3c; border-color: #e74c3c;">Delete</button>
                    </div>
                </td>
            </tr>
        }
    </tbody>
</table>

@{
    var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.HasNextPage ? "disabled" : "";
}

<div class="d-flex justify-content-between align-items-center">
    <a asp-action="Index"
       asp-route-sortOrder="@ViewData["CurrentSort"]"
       asp-route-pageNumber="@(Model.PageIndex - 1)"
       asp-route-currentFilter="@ViewData["CurrentFilter"]"
       asp-route-pageSize="@ViewData["CurrentPageSize"]"
       class="btn btn-primary @prevDisabled">
        Previous
    </a>

    <span>Page @Model.PageIndex of @Model.TotalPages</span>

    <a asp-action="Index"
       asp-route-sortOrder="@ViewData["CurrentSort"]"
       asp-route-pageNumber="@(Model.PageIndex + 1)"
       asp-route-currentFilter="@ViewData["CurrentFilter"]"
       asp-route-pageSize="@ViewData["CurrentPageSize"]"
       class="btn btn-primary @nextDisabled">
        Next
    </a>
</div>

<div id="toast"></div>

@section Scripts {
    <script src="~/js/toast-util.js"></script>
    <script>
        // Show toast if successMessage is present from server
        @if (!string.IsNullOrEmpty(successMessage))
        {
            <text>
            showToast('@successMessage', 'success');
            </text>
        }

        async function deleteMovie(movieId, movieTitle) {
            if (confirm(`Are you sure you want to delete the movie "${movieTitle}"?`)) {
                try {
                    const response = await fetch(`/Movies/Delete/${movieId}`, {
                        method: "DELETE",
                        headers: {
                            "Content-Type": "application/json"
                        }
                    });

                    if (response.ok) {
                        document.getElementById(`movie-row-${movieId}`).remove();
                        showToast(`Movie "${movieTitle}" deleted successfully!`, "success");
                    } else {
                        const errorData = await response.json();
                        showToast(`Failed to delete movie: ${errorData.error || "Unknown error"}`, "error");
                    }
                } catch (error) {
                    showToast(`Error deleting movie: ${error.message}`, "error");
                }
            }
        }
    </script>
}
